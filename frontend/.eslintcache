[{"D:\\clones\\mern\\todoapp\\frontend\\src\\index.js":"1","D:\\clones\\mern\\todoapp\\frontend\\src\\App.js":"2","D:\\clones\\mern\\todoapp\\frontend\\src\\reportWebVitals.js":"3","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\index.js":"4","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\reportWebVitals.js":"5","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\App.js":"6","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\handleRequests.js":"7","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Header.js":"8","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Login.js":"9","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Todo.js":"10","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Loginform.js":"11","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\StateProvider.js":"12","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\reducer.js":"13"},{"size":500,"mtime":1610890622305,"results":"14","hashOfConfig":"15"},{"size":222,"mtime":1610891085031,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":689,"mtime":1611173502274,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":559,"mtime":1611172958100,"results":"21","hashOfConfig":"19"},{"size":2233,"mtime":1611496924220,"results":"22","hashOfConfig":"19"},{"size":2145,"mtime":1611172935313,"results":"23","hashOfConfig":"19"},{"size":633,"mtime":1611164788594,"results":"24","hashOfConfig":"19"},{"size":3755,"mtime":1611495753212,"results":"25","hashOfConfig":"19"},{"size":4809,"mtime":1611497257694,"results":"26","hashOfConfig":"19"},{"size":368,"mtime":1611165652251,"results":"27","hashOfConfig":"19"},{"size":321,"mtime":1611495753260,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1jti7bk",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"iox9cn",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\clones\\mern\\todoapp\\frontend\\src\\index.js",[],["59","60"],"D:\\clones\\mern\\todoapp\\frontend\\src\\App.js",[],"D:\\clones\\mern\\todoapp\\frontend\\src\\reportWebVitals.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\index.js",[],["61","62"],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\reportWebVitals.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\App.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\handleRequests.js",["63"],"const uri = \"/tasks\";\nconst usersUri = \"/users\";\nconst OauthUri = \"/auth\";\nconst handleRequests = {\n  get: async (urip) => {\n    const response = await fetch(uri + urip);\n    return response.json();\n  },\n  put: async (id, updatedTodo) => {\n    const response = await fetch(uri + `/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify({ task: updatedTodo }),\n    });\n    return response.json();\n  },\n  putCheck: async (id, check) => {\n    const response = await fetch(uri + `/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify({ checked: check }),\n    });\n    return response.json();\n  },\n  post: async (input, id) => {\n    const response = await fetch(uri, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify({ task: input, author: id }),\n    });\n    return response.json();\n  },\n  deleteOne: async (id) => {\n    const response = await fetch(uri + `/${id}`, {\n      method: \"Delete\",\n    });\n    return response.json();\n  },\n  deleteAll: async () => {\n    const response = await fetch(uri, {\n      method: \"DELETE\",\n    });\n    return response.json();\n  },\n  login: async (username, password) => {\n    const response = await fetch(usersUri + \"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username: username, password: password }),\n    });\n    return response.json();\n  },\n  signup: async (username, password, firstname, lastname) => {\n    const response = await fetch(usersUri + \"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password,\n        firstname: firstname,\n        lastname: lastname,\n      }),\n    });\n    return response.json();\n  },\n};\n\nexport default handleRequests;\n","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Header.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Login.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Todo.js",["64","65","66","67","68"],"import React, { useState, useEffect } from \"react\";\nimport \"./Todo.css\";\nimport handleRequests from \"../handleRequests.js\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useStateValue } from \"../StateProvider.js\";\nfunction Todo({ type }) {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [_id, set_id] = useState(\"\");\n  const submitInput = (e) => {\n    e.preventDefault();\n    handleRequests\n      .post(input, localStorage.getItem(\"_id\"))\n      .then((data1) => {\n        console.log(data1);\n        handleRequests\n          .get(`/${data1.task._id}`)\n          .then((data) => {\n            setTodos([...todos, data1.task]);\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n\n    setInput(\"\");\n  };\n\n  const handleDeleteAll = (e) => {\n    e.preventDefault();\n    handleRequests\n      .deleteAll()\n      .then((data) => console.log(data))\n      .catch((err) => console.log(err));\n    setTodos([]);\n  };\n\n  const handleUpdate = (id, index, checked) => (e) => {\n    e.preventDefault();\n    let cp = [...todos];\n    if (checked === undefined) {\n      let updatedTodo = prompt(\n        \"please enter your updated todo \",\n        cp[index].task\n      );\n      if (updatedTodo) {\n        handleRequests\n          .put(id, updatedTodo)\n          .then((data1) => {\n            console.log(data1);\n          })\n          .catch((err) => console.log(err));\n        cp[index].task = updatedTodo;\n      }\n    } else {\n      handleRequests\n        .putCheck(id, checked)\n        .then((data) => {\n          console.log(data);\n        })\n        .catch((err) => console.log(err));\n      cp[index].checked = checked;\n    }\n\n    setTodos(cp);\n  };\n\n  const handleDeleteOne = (id) => (e) => {\n    e.preventDefault();\n    handleRequests\n      .deleteOne(id)\n\n      .then((data) => console.log(data))\n      .catch((err) => console.log(err));\n    setTodos(todos.filter((todo) => todo._id != id));\n  };\n\n  useEffect(async () => {\n    handleRequests\n      .get(`/?author=${localStorage.getItem(\"_id\")}`)\n      .then((data) => {\n        setTodos(data.tasks);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"todo\">\n      <h2 className=\"todo__title\"> {type}</h2>\n      <div className=\"todo__fun\">\n        <form className=\"todo__input\">\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            type=\"text\"\n            placeholder=\"New Todo..\"\n          />\n          <button type=\"submit\" onClick={submitInput}></button>\n        </form>\n\n        <Button type=\"submit\" color=\"secondary\" onClick={handleDeleteAll}>\n          DELETE ALL\n        </Button>\n      </div>\n      {todos?.map(({ task, checked, _id }, index) => (\n        <div className=\"todo__container\" key={_id}>\n          <div className=\"todo__containerLeft\">\n            <Checkbox\n              size=\"small\"\n              color=\"primary\"\n              checked={checked}\n              onClick={handleUpdate(_id, index, !checked)}\n            />\n            <p className=\"todo__containerParagraph\">{task}</p>\n          </div>\n          <div className=\"todo__containerRight\">\n            <IconButton onClick={handleUpdate(_id, index)}>\n              <Edit className=\"todo__icon1\" />\n            </IconButton>\n            <IconButton onClick={handleDeleteOne(_id)}>\n              <Delete className=\"todo__icon2\" />\n            </IconButton>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Todo;\n","D:\\Clones\\MERN\\TodoApp\\frontend\\src\\components\\Loginform.js",["69"],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\StateProvider.js",[],"D:\\Clones\\MERN\\TodoApp\\frontend\\src\\reducer.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":3,"column":7,"nodeType":"78","messageId":"79","endLine":3,"endColumn":15},{"ruleId":"76","severity":1,"message":"80","line":9,"column":10,"nodeType":"78","messageId":"79","endLine":9,"endColumn":23},{"ruleId":"76","severity":1,"message":"81","line":13,"column":10,"nodeType":"78","messageId":"79","endLine":13,"endColumn":13},{"ruleId":"76","severity":1,"message":"82","line":13,"column":15,"nodeType":"78","messageId":"79","endLine":13,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":78,"column":46,"nodeType":"85","messageId":"86","endLine":78,"endColumn":48},{"ruleId":"87","severity":1,"message":"88","line":81,"column":13,"nodeType":"89","endLine":88,"endColumn":4},{"ruleId":"76","severity":1,"message":"90","line":18,"column":12,"nodeType":"78","messageId":"79","endLine":18,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],["91"],["92"],"no-unused-vars","'OauthUri' is assigned a value but never used.","Identifier","unusedVar","'useStateValue' is defined but never used.","'_id' is assigned a value but never used.","'set_id' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]